! This file is part of NHDS
! Copyright (C) 2024 Daniel Verscharen (d.verscharen@ucl.ac.uk)
!All rights reserved.
!
!Redistribution and use in source and binary forms, with or without
!modification, are permitted provided that the following conditions are met:
!
!1. Redistributions of source code must retain the above copyright notice, this
!   list of conditions and the following disclaimer.
!2. Redistributions in binary form must reproduce the above copyright notice,
!   this list of conditions and the following disclaimer in the documentation
!   and/or other materials provided with the distribution.
!
!THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
!ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
!WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
!DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
!ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
!(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
!LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
!ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
!(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
!SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
!
!The views and conclusions contained in the software and documentation are those
!of the authors and should not be interpreted as representing official policies,
!either expressed or implied, of the NHDS project.

&species
! Number of species:
! (ensure the species definitions below include a sufficient number of entries)
numspec=2
/

&parameters
! Maximum number of iterations in the Newton method:
numiter=1000

! Threshold for the determinant of the dispersion tensor:
! If det D <= det_D_threshold, the Newton iteration will be stopped
det_D_threshold=1.d-16

! Maximum of sum over resonances:
nmax=1000

! If I_n is less than this value, higher n are neglected:
Bessel_zero=1.d-50

! Initial guess for the frequency (complex number):
initial_guess=(4.25d-2,-2.1d-4)

! Scan type:
! If 1, then scan over abs(k) through krange at angles defined in theta_range and theta steps.
! If 2, then scan over kpar at constant kperp as defined as the initial theta_range(1).
! If 3, then scan over kperp at constant kpar as defined as the initial theta_range(1).
scan_type=1

! Range of values to scan over in wavenumber:
krange=0.01d0,0.21d0

! Number of steps to scan over krange:
ksteps=8

! Range of angle of propagation (in degrees):
theta_range=0.001d0,0.01d0

! Steps in the theta direction:
theta_steps=8

! Temperature anisotropy (Tperp/Tparallel):
alpha=1.d0,1.d0

! Parallel beta of the species:
! (if a species has beta=0.d0, the susceptibility is calculated with cold-plasma theory)
beta=1.d0,1.d0

! Charge of the species in units of the first ion charge:
charge=1.d0,-1.d0

! Mass of the species in units of ion mass:
mass=1.d0,5.446623d-4

! Density of the species in units of proton density:
density=1.d0,1.d0

! Drift speed of the species in units of proton Alfven speed:
vdrift=0.d0,0.d0

! Alfven speed divided by speed of light
vAc=1.d-4

! Write moments to a file or not:
output_mom=T

! Write E & B vectors to a file or not:
output_EB=T

! Override the k,theta values specified above with the ones read from a file:
kth_file=T

! Filename to read k, theta values from:
kth_filename='kth_kawtc'

! Amplitude mode:
! If 1, then ampl = delta B_x / B0.
! If 2, then ampl = delta B_y / B0.
! If 3, then ampl = delta B_z / B0.
ampl_mode=2

! Amplitude for the calculation of polarisation properties:
ampl=1.d0

! Print warnings to std. output and stop program in case of problems:
output_warning=.FALSE.

!! The following parameters are used to determine delta f in write_delta_f:
! Write delta f or not:
output_df=F

! Species for output of delta f:
species_df=1

! Maximum of sum in Bessel function:
! can be very low (e.g., 3) for quasi-parallel propagation
mmax=1000

! If I_n is less than this value, higher m are neglected:
Bessel_zero_deltaf=1.d-50

! Steps in vx, vy, and vz:
vxsteps=100
vysteps=100
vzsteps=100

! Range in vpar and vperp:
vxrange=-1.d0,1.d0
vyrange=-1.d0,1.d0
vzrange=-1.d0,1.d0

! Number of time steps for one full period:
timesteps=40

! If periods is .TRUE., then num_periods is number of periods (2 PI / omega_r).
! If periods is .FALSE., then num_periods is number of gyro-periods (2 PI / Omega_p).
periods=T

! Number of periods:
num_periods=1

! Include wave damping in delta f calculation or not (exp(gamma*t)-term):
damping=F

! If const_r is .TRUE., then delta f is evaluated at point r = 0 -> cos(-omega * t)
! If const_r is .FALSE., then the wave period is a function of space at -> cos(k * r)
!		with k * r from 0 ... 2 pi at a fixed time. We "fly" along the k-direction over one wave train.
! 		If set on .FALSE., periods does not make a difference
const_r=T
/
